using bp.ot.s.API.Entities.Context;
using bp.ot.s.API.Entities.Dane.Invoice;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using bp.ot.s.API.Entities.Dane.Company;
using System.Data.Common;
using System.Security.Claims;
using bp.Pomocne.DTO;
using bp.Pomocne;


namespace bp.ot.s.API.Controllers
{
    [Route("api/[controller]/[action]")]
    [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme, Roles = "Finanse")]
    public class InvoiceBuyController : Controller
    {
        private readonly OfferTransDbContextDane _db;
        private CompanyService _companyService;
        private readonly InvoiceService _invoiceService;
        private readonly CommonFunctions _commonFunctions;

        public InvoiceBuyController(OfferTransDbContextDane db, CompanyService companyService, InvoiceService invoiceService, CommonFunctions commonFunctions)
        {
            this._db = db;
            this._companyService = companyService;
            this._invoiceService = invoiceService;
            this._commonFunctions = commonFunctions;
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
            var db = await this._invoiceService.InvoiceBuyQueryable()
                .FirstOrDefaultAsync(f=>f.InvoiceBuyId==id);

            if (db == null) {
                return NotFound();
            }

            await this._invoiceService.DeleteInvoiceBuy(id, db);
            await this._db.SaveChangesAsync();

            return NoContent();
        }

        [HttpGet("{dateStart}/{dateEnd}")]
        public async Task<IActionResult> GetAll(DateTime dateStart, DateTime dateEnd)
        {
            dateEnd = bp.Pomocne.DateHelp.DateHelpful.DateRangeDateTo(dateEnd);

            var dbResList = await this._invoiceService.InvoiceBuyQueryable()
                    .Where(w=>w.SellingDate>=dateStart && w.SellingDate<=dateEnd)
                    .OrderByDescending(o => o.InvoiceBuyId)
                    .ToListAsync();


            var res = new List<InvoiceBuyListDTO>();

            foreach (var inv in dbResList)
            {
                res.Add(this._invoiceService.InvoiceBuyDTOtoListDTO(this.EtoDTOInvoiceBuy(inv)));
            }


            return Ok(res);
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {

            var dbInvoice = id == 0 ? await this._invoiceService.InvoiceBuyQueryable()
                .LastOrDefaultAsync() :

                await this._invoiceService.InvoiceBuyQueryable()
                .FirstOrDefaultAsync(f=>f.InvoiceBuyId==id);

            if (dbInvoice == null) {
                return BadRequest(bp.PomocneLocal.ModelStateHelpful.ModelStateHelpful.ModelError("Błąd", $"Nie znaleziono faktury zakupu o ID: {id}"));
            }


            return Ok(this.EtoDTOInvoiceBuy(dbInvoice));
        }

        [HttpGet]
        public async Task<IActionResult> GetPaymentRemindList()
        {
            var dbRes = await this._invoiceService.InvoiceBuyQueryable()
                .Where(w => w.PaymentIsDone == false)
                .Select(s => s)
                .ToListAsync();

            var unpaid = new List<InvoicePaymentRemindDTO>();
            var notConfirmed = new List<InvoicePaymentRemindDTO>();


            foreach (var inv in dbRes)
            {
                var dto = new InvoicePaymentRemindDTO();
                this.EtDTOBasicInvoicePaymentRemind(inv, dto);

                // paymentDate based on paymentterms..
                if (inv.PaymentTerms.PaymentDays.HasValue)
                {
                    dto.PaymentDate = inv.SellingDate.AddDays(inv.PaymentTerms.PaymentDays.Value);
                }
                else {
                    dto.PaymentDate = inv.SellingDate;
                }


                //check if invoice is recived (or it its only generated by created laod-buy..)
                if (inv.InvoiceRecived)
                {
                    //dto.PaymentDate = 
                    unpaid.Add(dto);
                }
                else {
                    notConfirmed.Add(dto);
                }
            }

            var res = new
            {
                Unpaid = unpaid.OrderBy(o => o.PaymentDate).ToList(),
                NotConfirmed = notConfirmed.OrderBy(o => o.PaymentDate).ToList()
            };


            return Ok(res);
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> Put(int id, [FromBody] InvoiceBuyDTO dto)
        {

            var dbInvoice = new InvoiceBuy();

            if (id > 0)
            {
                dbInvoice = await this._invoiceService.InvoiceBuyQueryable()
                        .FirstOrDefaultAsync(f => f.InvoiceBuyId == id);

                if (dbInvoice == null)
                {
                    return BadRequest(bp.PomocneLocal.ModelStateHelpful.ModelStateHelpful.ModelError("Błąd", $"Nie znaleziono faktury o ID: {id}"));
                }
            }
            

            if (dbInvoice.Currency==null || dbInvoice.Currency.CurrencyId != dto.Currency.CurrencyId)
            {
                dbInvoice.Currency = _invoiceService._currencyList.Where(w => w.CurrencyId == dto.Currency.CurrencyId).FirstOrDefault();
                this._db.Entry(dbInvoice.Currency).State = EntityState.Modified;
            }

            dbInvoice.DateOfIssue = dto.DateOfIssue;
            dbInvoice.Info = dto.Info;
            dbInvoice.InvoiceNo = dto.InvoiceNo;

            //remove deleted pos
            if (dbInvoice.InvoicePosList != null)
            {
                foreach (var dbPos in dbInvoice.InvoicePosList)
                {
                    var found = dto.InvoiceLines.Where(w => w.Invoice_pos_id == dbPos.InvoicePosId).FirstOrDefault();
                    if (found == null)
                    {
                        this._db.Entry(dbPos).State = EntityState.Deleted;
                    }
                }
            }
            //modify or Add pos
            foreach (var pos in dto.InvoiceLines)
            {
                var dbPos = dbInvoice.InvoicePosList?.FirstOrDefault(f=>f.InvoicePosId==pos.Invoice_pos_id);
                if (dbPos != null)
                {
                    this._invoiceService.InvoicePosMapperFromDTO(dbPos, pos);
                }
                else {
                    //new entity
                    dbPos = new InvoicePos();
                    this._invoiceService.InvoicePosMapperFromDTO(dbPos, pos);
                    dbPos.InvoiceBuy = dbInvoice;
                    this._db.Entry(dbPos).State = EntityState.Added;
                }
            }

            var dbTotal = dbInvoice.InvoiceTotal ?? new InvoiceTotal();
            this._invoiceService.InvoiceTotalMapper(dbTotal, dto.InvoiceTotal);

            if (dto.InvoiceRecived.HasValue && dto.InvoiceRecived.Value)
            {
                dbInvoice.InvoiceRecived = true;
                dbInvoice.InvoiceReciveDate = dto.InvoiceReciveDate.Value;
            }
            else {
                dbInvoice.InvoiceRecived = false;
                dbInvoice.InvoiceReciveDate = null;
            }

            if (dbInvoice.InvoiceTotal == null)
            {
                dbTotal.InvoiceBuy = dbInvoice;
                this._db.Entry(dbTotal).State = EntityState.Added;
            }
            if (dto.PaymentIsDone)
            {
                dbInvoice.PaymentIsDone = true;
                dbInvoice.PaymentDate = dto.PaymentDate;
            }
            else {
                dbInvoice.PaymentIsDone = false;
                dbInvoice.PaymentDate = null;
            }

            var dbPaymentTerms = dbInvoice.PaymentTerms ?? new PaymentTerms();
            this._invoiceService.PaymentTermsMapper(dbPaymentTerms, dto.PaymentTerms);
            if (dbInvoice.PaymentTerms == null) {
                dbPaymentTerms.InvoiceBuy = dbInvoice;
                this._db.Entry(dbPaymentTerms).State = EntityState.Added;
            }



            //remove deleted taxValues
            if (dbInvoice.RatesValuesList != null)
            {
                foreach (var tax in dbInvoice.RatesValuesList)
                {
                    var dbTax = dto.Rates_values_list.Where(w => w.Invoice_rates_values_id == tax.RateValueId).FirstOrDefault();
                    if (dbTax == null)
                    {
                        this._db.Entry(tax).State = EntityState.Deleted;
                    }
                }
            }

            //modify or add new tax
            foreach (var rateDTO in dto.Rates_values_list)
            {
                var dbTax = dbInvoice.RatesValuesList?.Where(w => w.RateValueId == rateDTO.Invoice_rates_values_id).FirstOrDefault();
                if (dbTax != null)
                {
                    this._invoiceService.InvoiceTaxValueMapperFromDTO(dbTax, rateDTO);
                    this._db.Entry(dbTax).State = EntityState.Modified;
                }
                else {
                    dbTax = new RateValue();
                    this._invoiceService.InvoiceTaxValueMapperFromDTO(dbTax, rateDTO);
                    this._db.Entry(dbTax).State = EntityState.Added;
                }
            }

            
           
            if (dbInvoice.Seller==null || dbInvoice.Seller.CompanyId != dto.Seller.CompanyId) {
                dbInvoice.Seller = this._db.Company.Find(dto.Seller.CompanyId);
            }
            dbInvoice.SellingDate = dto.dateOfSell;

            this._commonFunctions.CreationInfoUpdate((CreationInfo)dbInvoice, dto.CreationInfo, User);


            //if theres no load ref invoiceRecived default is true;
            if (dbInvoice.Load == null)
            {
                dbInvoice.InvoiceRecived = true;
            }
            else {
                dbInvoice.InvoiceRecived = dto.InvoiceRecived.Value;
            }

            if (id == 0) {
                this._db.Entry(dbInvoice).State = EntityState.Added;
            }

            try
            {
                await this._db.SaveChangesAsync();
            }
            catch (DbException)
            {

                throw;
            }
            return NoContent();
        }

        //[HttpPost]
        //public async Task<IActionResult> Post([FromBody] InvoiceBuyDTO invoiceDTO)
        //{
        //    if (!ModelState.IsValid) {
        //        return BadRequest(ModelState);
        //    }
        //    var dbInvoice = new InvoiceBuy();

        //    dbInvoice.Currency = this._invoiceService._currencyList.Where(w => w.CurrencyId == invoiceDTO.Currency.CurrencyId).FirstOrDefault();
        //    dbInvoice.DateOfIssue = invoiceDTO.DateOfIssue;
        //    dbInvoice.Info = invoiceDTO.Info;
        //    dbInvoice.InvoiceNo = invoiceDTO.InvoiceNo;

        //    foreach (var pos in invoiceDTO.InvoiceLines)
        //    {
        //        var dbPos = this._invoiceService.NewInvoicePosBasedOnDTOMapper(pos);
        //        dbPos.InvoiceBuy = dbInvoice;
        //        this._db.Entry(dbPos).State = EntityState.Added;
        //    }


        //    var invTotal = new InvoiceTotal();
        //    _invoiceService.InvoiceTotalMapper(invTotal, invoiceDTO.InvoiceTotal.Current);
        //    invTotal.InvoiceBuy = dbInvoice;
        //    this._db.Entry(invTotal).State = EntityState.Added;


        //    var paymentTerms = new PaymentTerms();
        //    _invoiceService.PaymentTermsMapper(paymentTerms, invoiceDTO.PaymentTerms);
        //    paymentTerms.InvoiceBuy = dbInvoice;
        //    this._db.Entry(paymentTerms).State = EntityState.Added;

        //    foreach (var rate in invoiceDTO.Rates_values_list)
        //    {
        //        var dbRate = this._invoiceService.NewInvoiceRateValueBasedOnDTOMapper(rate);
        //        dbRate.InvoiceBuy = dbInvoice;
                
        //        this._db.Entry(dbRate).State = EntityState.Added;
        //    }

        //    dbInvoice.Seller = this._db.Company.Where(w => w.CompanyId == invoiceDTO.Seller.CompanyId).FirstOrDefault();
        //    dbInvoice.SellingDate = invoiceDTO.dateOfSell;

        //    this._db.Entry(dbInvoice).State = EntityState.Added;

        //    try
        //    {
        //        await this._db.SaveChangesAsync();
        //    }
        //    catch (DbException)
        //    {

        //        throw;
        //    }


        //    return NoContent();
        //}

        private InvoiceBuyDTO EtoDTOInvoiceBuy(InvoiceBuy inv)
        {
            var res = new InvoiceBuyDTO();
            res.CreationInfo = new bp.Pomocne.CommonFunctions().CreationInfoMapper((CreationInfo)inv);
            res.Currency = this._invoiceService.EtDTOCurrency(inv.Currency);
            res.DateOfIssue = inv.DateOfIssue;
            res.Info = inv.Info;
            res.Invoice_buy_id = inv.InvoiceBuyId;
            res.InvoiceNo = inv.InvoiceNo;
            foreach (var pos in inv.InvoicePosList)
            {
                res.InvoiceLines.Add(this._invoiceService.EtDTOInvoicePos(pos));
            }
            res.InvoiceTotal = _invoiceService.EtoDTOInvoiceTotal(inv.InvoiceTotal);
            res.InvoiceReciveDate = inv.InvoiceReciveDate;
            res.InvoiceRecived = inv.InvoiceRecived;

            if (inv.Load != null) {
                res.LoadId = inv.Load.LoadId;
                res.LoadNo = inv.Load.LoadNo;
            }
            if (inv.PaymentIsDone)
            {
                res.PaymentIsDone = true;
                res.PaymentDate = inv.PaymentDate;
            }
            else {
                res.PaymentIsDone = false;
                res.PaymentDate = null;
            }
            res.PaymentTerms = this._invoiceService.EtDTOPaymentTerms(inv.PaymentTerms);
            foreach (var rate in inv.RatesValuesList)
            {
                res.Rates_values_list.Add(this._invoiceService.EtoDTORateValue(rate));
            }
            res.Seller = _companyService.EtDTOCompany(inv.Seller);
            res.dateOfSell = inv.SellingDate;
            return res;
        }

        private InvoicePaymentRemindDTO EtDTOBasicInvoicePaymentRemind(InvoiceBuy db, InvoicePaymentRemindDTO dto)
        {
            var res = dto ?? new InvoicePaymentRemindDTO();

            res.Company = this._companyService.CompanyCardMapper(db.Seller);
            res.Currency = this._invoiceService.EtDTOCurrency(db.Currency);
            res.InvoiceId = db.InvoiceBuyId;
            res.InvoiceNo = db.InvoiceNo;
            res.InvoiceTotal = this._invoiceService.EtoDTOInvoiceTotal(db.InvoiceTotal);


            return res;
        }
               
    }
}
