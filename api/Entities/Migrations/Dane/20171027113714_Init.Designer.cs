// <auto-generated />
using bp.ot.s.API.Entities.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace bp.ot.s.API.entities.Migrations.dane
{
    [DbContext(typeof(OfferTransDbContextDane))]
    [Migration("20171027113714_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Address.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address_type");

                    b.Property<int>("CompanyRefId");

                    b.Property<string>("Country")
                        .HasMaxLength(2);

                    b.Property<string>("Locality");

                    b.Property<string>("Postal_code")
                        .HasMaxLength(12);

                    b.Property<string>("Street_address");

                    b.Property<string>("Street_number");

                    b.HasKey("AddressId");

                    b.HasIndex("CompanyRefId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Company.BankAccount", b =>
                {
                    b.Property<int>("BankAccountId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Account_no");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("Swift");

                    b.Property<string>("Type");

                    b.HasKey("BankAccountId");

                    b.HasIndex("CompanyId");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Company.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<string>("Legal_name");

                    b.Property<string>("Native_name");

                    b.Property<string>("Short_name");

                    b.Property<string>("Telephone");

                    b.Property<int>("TransId");

                    b.Property<string>("Url");

                    b.Property<string>("Vat_id");

                    b.HasKey("CompanyId");

                    b.ToTable("Comapny");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Company.CompanyEmployee", b =>
                {
                    b.Property<int>("CompanyEmployeeId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyRefId");

                    b.Property<string>("Email");

                    b.Property<bool>("Entitled");

                    b.Property<string>("Family_name");

                    b.Property<string>("Given_name");

                    b.Property<bool>("Hidden");

                    b.Property<bool>("Is_driver");

                    b.Property<bool>("Is_moderator");

                    b.Property<string>("Telephone");

                    b.Property<string>("Trans_id");

                    b.HasKey("CompanyEmployeeId");

                    b.HasIndex("CompanyRefId");

                    b.ToTable("CompanyEmployee");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(3);

                    b.HasKey("CurrencyId");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.InvoicePos", b =>
                {
                    b.Property<int>("InvoicePosId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BruttoValue");

                    b.Property<int?>("InvoiceSellId");

                    b.Property<string>("MeasurementUnit")
                        .HasMaxLength(10);

                    b.Property<string>("Name");

                    b.Property<double>("NettoValue");

                    b.Property<string>("Pkwiu");

                    b.Property<int>("Quantity");

                    b.Property<double>("UnitPrice");

                    b.Property<string>("VatRate")
                        .HasMaxLength(15);

                    b.Property<double>("VatUnitValue");

                    b.Property<double>("VatValue");

                    b.HasKey("InvoicePosId");

                    b.HasIndex("InvoiceSellId");

                    b.ToTable("InvoicePos");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.InvoiceSell", b =>
                {
                    b.Property<int>("InvoiceSellId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BuyerCompanyId");

                    b.Property<int?>("CurrencyId");

                    b.Property<DateTime>("DateOfIssue");

                    b.Property<bool>("ExtraInfo_IsInWords");

                    b.Property<bool>("ExtraInfo_IsLoadNo");

                    b.Property<bool>("ExtraInfo_IsTaxNbpExchanged");

                    b.Property<string>("ExtraInfo_LoadNo");

                    b.Property<string>("ExtraInfo_TaxExchangedInfo");

                    b.Property<string>("ExtraInfo_TotalBruttoInWords");

                    b.Property<string>("Info");

                    b.Property<string>("InvoiceNo");

                    b.Property<int?>("PaymentTermsId");

                    b.Property<int?>("SellerCompanyId");

                    b.Property<DateTime>("SellingDate");

                    b.Property<double>("TotalBrutto");

                    b.Property<double>("TotalNetto");

                    b.Property<double>("TotalTax");

                    b.HasKey("InvoiceSellId");

                    b.HasIndex("BuyerCompanyId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PaymentTermsId")
                        .IsUnique()
                        .HasFilter("[PaymentTermsId] IS NOT NULL");

                    b.HasIndex("SellerCompanyId");

                    b.ToTable("InvoiceSell");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.PaymentTerm", b =>
                {
                    b.Property<int>("PaymentTermId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDescription");

                    b.Property<bool>("IsPaymentDate");

                    b.Property<string>("Name");

                    b.HasKey("PaymentTermId");

                    b.ToTable("PaymentTerm");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.PaymentTerms", b =>
                {
                    b.Property<int>("PaymentTermsId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Day0");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("PaymentDate");

                    b.Property<int?>("PaymentDays");

                    b.Property<int?>("PaymentTermId");

                    b.HasKey("PaymentTermsId");

                    b.HasIndex("PaymentTermId");

                    b.ToTable("PaymentTerms");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.RateValue", b =>
                {
                    b.Property<int>("RateValueId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BruttoValue");

                    b.Property<int?>("InvoiceSellId");

                    b.Property<double>("NettoValue");

                    b.Property<string>("VatRate");

                    b.Property<double>("VatValue");

                    b.HasKey("RateValueId");

                    b.HasIndex("InvoiceSellId");

                    b.ToTable("InvoiceRatesValues");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Address.Address", b =>
                {
                    b.HasOne("bp.ot.s.API.Entities.Dane.Company.Company", "Company")
                        .WithMany("AddressList")
                        .HasForeignKey("CompanyRefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Company.BankAccount", b =>
                {
                    b.HasOne("bp.ot.s.API.Entities.Dane.Company.Company", "Company")
                        .WithMany("BankAccountList")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Company.CompanyEmployee", b =>
                {
                    b.HasOne("bp.ot.s.API.Entities.Dane.Company.Company", "Company")
                        .WithMany("EmployeeList")
                        .HasForeignKey("CompanyRefId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.InvoicePos", b =>
                {
                    b.HasOne("bp.ot.s.API.Entities.Dane.Invoice.InvoiceSell", "InvoiceSell")
                        .WithMany("InvoicePosList")
                        .HasForeignKey("InvoiceSellId");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.InvoiceSell", b =>
                {
                    b.HasOne("bp.ot.s.API.Entities.Dane.Company.Company", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerCompanyId");

                    b.HasOne("bp.ot.s.API.Entities.Dane.Invoice.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("bp.ot.s.API.Entities.Dane.Invoice.PaymentTerms", "PaymentTerms")
                        .WithOne("InvoiceSell")
                        .HasForeignKey("bp.ot.s.API.Entities.Dane.Invoice.InvoiceSell", "PaymentTermsId");

                    b.HasOne("bp.ot.s.API.Entities.Dane.Company.Company", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerCompanyId");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.PaymentTerms", b =>
                {
                    b.HasOne("bp.ot.s.API.Entities.Dane.Invoice.PaymentTerm", "PaymentTerm")
                        .WithMany()
                        .HasForeignKey("PaymentTermId");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.RateValue", b =>
                {
                    b.HasOne("bp.ot.s.API.Entities.Dane.Invoice.InvoiceSell", "InvoiceSell")
                        .WithMany("RatesValuesList")
                        .HasForeignKey("InvoiceSellId");
                });
#pragma warning restore 612, 618
        }
    }
}
