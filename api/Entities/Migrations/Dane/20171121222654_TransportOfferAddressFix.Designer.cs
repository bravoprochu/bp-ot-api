// <auto-generated />
using bp.ot.s.API.Entities.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace bp.ot.s.API.Entities.Migrations.Dane
{
    [DbContext(typeof(BpKpirContextDane))]
    [Migration("20171121222654_TransportOfferAddressFix")]
    partial class TransportOfferAddressFix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Address.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address_type");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("Country")
                        .HasMaxLength(2);

                    b.Property<int?>("LoadRouteId");

                    b.Property<string>("Locality");

                    b.Property<string>("Postal_code")
                        .HasMaxLength(12);

                    b.Property<string>("Street_address");

                    b.Property<string>("Street_number");

                    b.HasKey("AddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LoadRouteId")
                        .IsUnique()
                        .HasFilter("[LoadRouteId] IS NOT NULL");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Company.BankAccount", b =>
                {
                    b.Property<int>("BankAccountId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Account_no");

                    b.Property<int>("CompanyId");

                    b.Property<string>("Swift");

                    b.Property<string>("Type");

                    b.HasKey("BankAccountId");

                    b.HasIndex("CompanyId");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Company.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<string>("Legal_name");

                    b.Property<string>("Native_name");

                    b.Property<string>("Short_name");

                    b.Property<string>("Telephone");

                    b.Property<int>("TransId");

                    b.Property<string>("Url");

                    b.Property<string>("Vat_id");

                    b.HasKey("CompanyId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Company.CompanyEmployee", b =>
                {
                    b.Property<int>("CompanyEmployeeId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<string>("Email");

                    b.Property<bool>("Entitled");

                    b.Property<string>("Family_name");

                    b.Property<string>("Given_name");

                    b.Property<bool>("Hidden");

                    b.Property<bool>("Is_driver");

                    b.Property<bool>("Is_moderator");

                    b.Property<string>("Telephone");

                    b.Property<string>("Trans_id");

                    b.HasKey("CompanyEmployeeId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyEmployee");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(3);

                    b.HasKey("CurrencyId");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.InvoiceBuy", b =>
                {
                    b.Property<int>("InvoiceBuyId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CurrencyId");

                    b.Property<DateTime>("DateOfIssue");

                    b.Property<string>("Info");

                    b.Property<string>("InvoiceNo");

                    b.Property<bool>("InvoiceRecived");

                    b.Property<int?>("LoadId");

                    b.Property<int>("PaymentTermsId");

                    b.Property<int>("SellerId");

                    b.Property<DateTime>("SellingDate");

                    b.HasKey("InvoiceBuyId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LoadId")
                        .IsUnique()
                        .HasFilter("[LoadId] IS NOT NULL");

                    b.HasIndex("PaymentTermsId")
                        .IsUnique();

                    b.HasIndex("SellerId");

                    b.ToTable("InvoiceBuy");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.InvoiceExtraInfo", b =>
                {
                    b.Property<int>("InvoiceExtraInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CmrName");

                    b.Property<bool>("CmrRecived");

                    b.Property<DateTime?>("CmrRecivedDate");

                    b.Property<DateTime?>("InvoiceRecivedDate");

                    b.Property<int>("InvoiceSellId");

                    b.Property<bool>("InvoiceSent");

                    b.Property<string>("InvoiceSentNo");

                    b.Property<string>("LoadNo");

                    b.Property<string>("TaxExchangedInfo");

                    b.HasKey("InvoiceExtraInfoId");

                    b.HasIndex("InvoiceSellId")
                        .IsUnique();

                    b.ToTable("InvoiceExtraInfo");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.InvoicePos", b =>
                {
                    b.Property<int>("InvoicePosId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BruttoValue");

                    b.Property<int?>("InvoiceBuyId");

                    b.Property<int?>("InvoiceSellId");

                    b.Property<string>("MeasurementUnit")
                        .HasMaxLength(10);

                    b.Property<string>("Name");

                    b.Property<double>("NettoValue");

                    b.Property<string>("Pkwiu");

                    b.Property<int>("Quantity");

                    b.Property<double>("UnitPrice");

                    b.Property<string>("VatRate")
                        .HasMaxLength(15);

                    b.Property<double>("VatUnitValue");

                    b.Property<double>("VatValue");

                    b.HasKey("InvoicePosId");

                    b.HasIndex("InvoiceBuyId");

                    b.HasIndex("InvoiceSellId");

                    b.ToTable("InvoicePos");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.InvoiceSell", b =>
                {
                    b.Property<int>("InvoiceSellId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BuyerId");

                    b.Property<int>("CurrencyId");

                    b.Property<DateTime>("DateOfIssue");

                    b.Property<string>("Info");

                    b.Property<string>("InvoiceNo");

                    b.Property<int?>("LoadId");

                    b.Property<int>("PaymentTermsId");

                    b.Property<int>("SellerId");

                    b.Property<DateTime>("SellingDate");

                    b.Property<int?>("TransportOfferId");

                    b.HasKey("InvoiceSellId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LoadId")
                        .IsUnique()
                        .HasFilter("[LoadId] IS NOT NULL");

                    b.HasIndex("PaymentTermsId")
                        .IsUnique();

                    b.HasIndex("SellerId");

                    b.ToTable("InvoiceSell");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.InvoiceTotal", b =>
                {
                    b.Property<int>("InvoiceTotalId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("InvoiceBuyId");

                    b.Property<int?>("InvoiceSellId");

                    b.Property<double>("TotalBrutto");

                    b.Property<double>("TotalNetto");

                    b.Property<double>("TotalTax");

                    b.HasKey("InvoiceTotalId");

                    b.HasIndex("InvoiceBuyId")
                        .IsUnique()
                        .HasFilter("[InvoiceBuyId] IS NOT NULL");

                    b.HasIndex("InvoiceSellId")
                        .IsUnique()
                        .HasFilter("[InvoiceSellId] IS NOT NULL");

                    b.ToTable("InvoiceTotal");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.PaymentTerm", b =>
                {
                    b.Property<int>("PaymentTermId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDescription");

                    b.Property<bool>("IsPaymentDate");

                    b.Property<string>("Name");

                    b.HasKey("PaymentTermId");

                    b.ToTable("PaymentTerm");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.PaymentTerms", b =>
                {
                    b.Property<int>("PaymentTermsId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Day0");

                    b.Property<int?>("InvoiceBuyId");

                    b.Property<int?>("InvoiceSellId");

                    b.Property<DateTime?>("PaymentDate");

                    b.Property<int?>("PaymentDays");

                    b.Property<string>("PaymentDescription");

                    b.Property<int>("PaymentTermId");

                    b.Property<int?>("TradeInfoId");

                    b.Property<int?>("TransportOfferId");

                    b.HasKey("PaymentTermsId");

                    b.HasIndex("PaymentTermId");

                    b.HasIndex("TradeInfoId")
                        .IsUnique()
                        .HasFilter("[TradeInfoId] IS NOT NULL");

                    b.ToTable("PaymentTerms");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.RateValue", b =>
                {
                    b.Property<int>("RateValueId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BruttoValue");

                    b.Property<int?>("InvoiceBuyId");

                    b.Property<int?>("InvoiceSellId");

                    b.Property<double>("NettoValue");

                    b.Property<string>("VatRate");

                    b.Property<double>("VatValue");

                    b.HasKey("RateValueId");

                    b.HasIndex("InvoiceBuyId");

                    b.HasIndex("InvoiceSellId");

                    b.ToTable("InvoiceRatesValues");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.TransportOffer.TransportOffer", b =>
                {
                    b.Property<int>("TransportOfferId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<int>("CurrencyNbpId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Info");

                    b.Property<int?>("InvoiceSellId");

                    b.Property<int>("LoadId");

                    b.Property<string>("OfferNo");

                    b.Property<int>("PaymentTermsId");

                    b.Property<int>("UnloadId");

                    b.HasKey("TransportOfferId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CurrencyNbpId")
                        .IsUnique();

                    b.HasIndex("InvoiceSellId")
                        .IsUnique()
                        .HasFilter("[InvoiceSellId] IS NOT NULL");

                    b.HasIndex("PaymentTermsId")
                        .IsUnique();

                    b.HasIndex("UnloadId")
                        .IsUnique();

                    b.ToTable("TransportOffer");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.TransportOffer.TransportOfferAddress", b =>
                {
                    b.Property<int>("TransportOfferAddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int?>("LoadId");

                    b.Property<string>("Locality");

                    b.Property<string>("PostalCode");

                    b.Property<int?>("UnloadId");

                    b.HasKey("TransportOfferAddressId");

                    b.HasIndex("LoadId")
                        .IsUnique()
                        .HasFilter("[LoadId] IS NOT NULL");

                    b.ToTable("TransportOfferAddress");
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.CurrencyNbp", b =>
                {
                    b.Property<int>("CurrencyNbpId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CurrencyId");

                    b.Property<int?>("LoadTransEuId");

                    b.Property<double>("PlnValue");

                    b.Property<double>("Price");

                    b.Property<double>("Rate");

                    b.Property<DateTime>("RateDate");

                    b.Property<int?>("TradeInfoId");

                    b.Property<int?>("TransportOfferId");

                    b.HasKey("CurrencyNbpId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LoadTransEuId")
                        .IsUnique()
                        .HasFilter("[LoadTransEuId] IS NOT NULL");

                    b.HasIndex("TradeInfoId")
                        .IsUnique()
                        .HasFilter("[TradeInfoId] IS NOT NULL");

                    b.ToTable("CurrencyNbp");
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.Load", b =>
                {
                    b.Property<int>("LoadId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Info");

                    b.Property<string>("LoadNo");

                    b.HasKey("LoadId");

                    b.ToTable("Load");
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.LoadBuy", b =>
                {
                    b.Property<int>("LoadBuyId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LoadId");

                    b.HasKey("LoadBuyId");

                    b.HasIndex("LoadId")
                        .IsUnique();

                    b.ToTable("LoadBuy");
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.LoadInfo", b =>
                {
                    b.Property<int>("LoadInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("LoadBuyId");

                    b.Property<double?>("LoadHeight");

                    b.Property<double?>("LoadLength");

                    b.Property<double?>("LoadVolume");

                    b.Property<double>("LoadWeight");

                    b.HasKey("LoadInfoId");

                    b.HasIndex("LoadBuyId")
                        .IsUnique();

                    b.ToTable("LoadInfo");
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.LoadInfoExtra", b =>
                {
                    b.Property<int>("LoadInfoExtraId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("IsForClearence");

                    b.Property<bool?>("IsLiftRequired");

                    b.Property<bool?>("IsLtl");

                    b.Property<bool?>("IsTirCableRequired");

                    b.Property<bool?>("IsTrackingSystemRequired");

                    b.Property<bool?>("IsTruckCraneRequired");

                    b.Property<int>("LoadInfoId");

                    b.Property<int>("RequiredTruckBodyId");

                    b.Property<int?>("TypeOfLoadId");

                    b.HasKey("LoadInfoExtraId");

                    b.HasIndex("LoadInfoId")
                        .IsUnique();

                    b.HasIndex("RequiredTruckBodyId");

                    b.HasIndex("TypeOfLoadId");

                    b.ToTable("LoadInfoExtra");
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.LoadInfoExtraAddrClassess", b =>
                {
                    b.Property<int>("LoadInfoExtraAddrClassessId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("LoadInfoExtraId");

                    b.Property<int?>("ViewValueDictionaryId");

                    b.HasKey("LoadInfoExtraAddrClassessId");

                    b.HasIndex("LoadInfoExtraId");

                    b.HasIndex("ViewValueDictionaryId");

                    b.ToTable("LoadInfoExtraAddrClassess");
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.LoadInfoExtraWaysOfLoad", b =>
                {
                    b.Property<int>("LoadInfoExtraWaysOfLoadId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("LoadInfoExtraId");

                    b.Property<int?>("ViewValueDictionaryId");

                    b.HasKey("LoadInfoExtraWaysOfLoadId");

                    b.HasIndex("LoadInfoExtraId");

                    b.HasIndex("ViewValueDictionaryId");

                    b.ToTable("LoadInfoExtraWaysOfLoad");
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.LoadRoute", b =>
                {
                    b.Property<int>("LoadRouteId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Info");

                    b.Property<bool>("IsLoadingType");

                    b.Property<int>("LoadBuyId");

                    b.Property<DateTime>("LoadingDate");

                    b.HasKey("LoadRouteId");

                    b.HasIndex("LoadBuyId");

                    b.ToTable("LoadRoute");
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.LoadRoutePallet", b =>
                {
                    b.Property<int>("LoadRoutePalletId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<string>("Dimmension");

                    b.Property<string>("Info");

                    b.Property<bool>("IsEuroType");

                    b.Property<bool?>("IsExchangeable");

                    b.Property<bool?>("IsStackable");

                    b.Property<int>("LoadRouteId");

                    b.HasKey("LoadRoutePalletId");

                    b.HasIndex("LoadRouteId");

                    b.ToTable("LoadRoutePallet");
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.LoadSell", b =>
                {
                    b.Property<int>("LoadSellId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LoadId");

                    b.Property<int>("PrincipalId");

                    b.HasKey("LoadSellId");

                    b.HasIndex("LoadId")
                        .IsUnique();

                    b.HasIndex("PrincipalId");

                    b.ToTable("LoadSell");
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.LoadSellContactPersons", b =>
                {
                    b.Property<int>("CompanyEmployeeId");

                    b.Property<int>("LoadSellId");

                    b.HasKey("CompanyEmployeeId", "LoadSellId");

                    b.HasIndex("LoadSellId");

                    b.ToTable("LoadSellContactsPersons");
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.LoadTransEu", b =>
                {
                    b.Property<int>("LoadTransEuId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LoadId");

                    b.Property<int>("SellingCompanyId");

                    b.Property<string>("TransEuId");

                    b.HasKey("LoadTransEuId");

                    b.HasIndex("LoadId")
                        .IsUnique();

                    b.HasIndex("SellingCompanyId");

                    b.ToTable("LoadTransEu");
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.LoadTransEuContactPerson", b =>
                {
                    b.Property<int>("CompanyEmployeeId");

                    b.Property<int>("LoadTransEuId");

                    b.HasKey("CompanyEmployeeId", "LoadTransEuId");

                    b.HasIndex("LoadTransEuId");

                    b.ToTable("LoadTransEuContactsPersons");
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.TradeInfo", b =>
                {
                    b.Property<int>("TradeInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("LoadBuyId");

                    b.Property<int?>("LoadSellId");

                    b.HasKey("TradeInfoId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LoadBuyId")
                        .IsUnique()
                        .HasFilter("[LoadBuyId] IS NOT NULL");

                    b.HasIndex("LoadSellId")
                        .IsUnique()
                        .HasFilter("[LoadSellId] IS NOT NULL");

                    b.ToTable("LoadTradeInfo");
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.ViewValueDictionary", b =>
                {
                    b.Property<int>("ViewValueDictionaryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value");

                    b.Property<string>("ViewValue");

                    b.Property<int>("ViewValueGroupNameId");

                    b.HasKey("ViewValueDictionaryId");

                    b.HasIndex("ViewValueGroupNameId");

                    b.ToTable("ViewValueDictionary");
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.ViewValueGroupName", b =>
                {
                    b.Property<int>("ViewValueGroupNameId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("ViewValueGroupNameId");

                    b.ToTable("ViewValueGroupName");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Address.Address", b =>
                {
                    b.HasOne("bp.ot.s.API.Entities.Dane.Company.Company", "Company")
                        .WithMany("AddressList")
                        .HasForeignKey("CompanyId");

                    b.HasOne("bp.ot.s.API.Models.Load.LoadRoute", "LoadRoute")
                        .WithOne("Address")
                        .HasForeignKey("bp.ot.s.API.Entities.Dane.Address.Address", "LoadRouteId");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Company.BankAccount", b =>
                {
                    b.HasOne("bp.ot.s.API.Entities.Dane.Company.Company", "Company")
                        .WithMany("BankAccountList")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Company.CompanyEmployee", b =>
                {
                    b.HasOne("bp.ot.s.API.Entities.Dane.Company.Company", "Company")
                        .WithMany("EmployeeList")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.InvoiceBuy", b =>
                {
                    b.HasOne("bp.ot.s.API.Entities.Dane.Invoice.Currency", "Currency")
                        .WithMany("InvoiceBuyList")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bp.ot.s.API.Models.Load.Load", "Load")
                        .WithOne("InvoiceBuy")
                        .HasForeignKey("bp.ot.s.API.Entities.Dane.Invoice.InvoiceBuy", "LoadId");

                    b.HasOne("bp.ot.s.API.Entities.Dane.Invoice.PaymentTerms", "PaymentTerms")
                        .WithOne("InvoiceBuy")
                        .HasForeignKey("bp.ot.s.API.Entities.Dane.Invoice.InvoiceBuy", "PaymentTermsId");

                    b.HasOne("bp.ot.s.API.Entities.Dane.Company.Company", "Seller")
                        .WithMany("InvoiceBuyList")
                        .HasForeignKey("SellerId");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.InvoiceExtraInfo", b =>
                {
                    b.HasOne("bp.ot.s.API.Entities.Dane.Invoice.InvoiceSell", "InvoiceSell")
                        .WithOne("ExtraInfo")
                        .HasForeignKey("bp.ot.s.API.Entities.Dane.Invoice.InvoiceExtraInfo", "InvoiceSellId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.InvoicePos", b =>
                {
                    b.HasOne("bp.ot.s.API.Entities.Dane.Invoice.InvoiceBuy", "InvoiceBuy")
                        .WithMany("InvoicePosList")
                        .HasForeignKey("InvoiceBuyId");

                    b.HasOne("bp.ot.s.API.Entities.Dane.Invoice.InvoiceSell", "InvoiceSell")
                        .WithMany("InvoicePosList")
                        .HasForeignKey("InvoiceSellId");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.InvoiceSell", b =>
                {
                    b.HasOne("bp.ot.s.API.Entities.Dane.Company.Company", "Buyer")
                        .WithMany("InvoiceSellBuyerList")
                        .HasForeignKey("BuyerId");

                    b.HasOne("bp.ot.s.API.Entities.Dane.Invoice.Currency", "Currency")
                        .WithMany("InvoiceSellList")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bp.ot.s.API.Models.Load.Load", "Load")
                        .WithOne("InvoiceSell")
                        .HasForeignKey("bp.ot.s.API.Entities.Dane.Invoice.InvoiceSell", "LoadId");

                    b.HasOne("bp.ot.s.API.Entities.Dane.Invoice.PaymentTerms", "PaymentTerms")
                        .WithOne("InvoiceSell")
                        .HasForeignKey("bp.ot.s.API.Entities.Dane.Invoice.InvoiceSell", "PaymentTermsId");

                    b.HasOne("bp.ot.s.API.Entities.Dane.Company.Company", "Seller")
                        .WithMany("InvoiceSellSellerlList")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.InvoiceTotal", b =>
                {
                    b.HasOne("bp.ot.s.API.Entities.Dane.Invoice.InvoiceBuy", "InvoiceBuy")
                        .WithOne("InvoiceTotal")
                        .HasForeignKey("bp.ot.s.API.Entities.Dane.Invoice.InvoiceTotal", "InvoiceBuyId");

                    b.HasOne("bp.ot.s.API.Entities.Dane.Invoice.InvoiceSell", "InvoiceSell")
                        .WithOne("InvoiceTotal")
                        .HasForeignKey("bp.ot.s.API.Entities.Dane.Invoice.InvoiceTotal", "InvoiceSellId");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.PaymentTerms", b =>
                {
                    b.HasOne("bp.ot.s.API.Entities.Dane.Invoice.PaymentTerm", "PaymentTerm")
                        .WithMany("PaymentTermsList")
                        .HasForeignKey("PaymentTermId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bp.ot.s.API.Models.Load.TradeInfo", "TradeInfo")
                        .WithOne("PaymentTerms")
                        .HasForeignKey("bp.ot.s.API.Entities.Dane.Invoice.PaymentTerms", "TradeInfoId");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.Invoice.RateValue", b =>
                {
                    b.HasOne("bp.ot.s.API.Entities.Dane.Invoice.InvoiceBuy", "InvoiceBuy")
                        .WithMany("RatesValuesList")
                        .HasForeignKey("InvoiceBuyId");

                    b.HasOne("bp.ot.s.API.Entities.Dane.Invoice.InvoiceSell", "InvoiceSell")
                        .WithMany("RatesValuesList")
                        .HasForeignKey("InvoiceSellId");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.TransportOffer.TransportOffer", b =>
                {
                    b.HasOne("bp.ot.s.API.Entities.Dane.Company.Company", "Company")
                        .WithMany("TransportOfferList")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bp.ot.s.API.Models.Load.CurrencyNbp", "CurrencyNbp")
                        .WithOne("TransportOffer")
                        .HasForeignKey("bp.ot.s.API.Entities.Dane.TransportOffer.TransportOffer", "CurrencyNbpId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bp.ot.s.API.Entities.Dane.Invoice.InvoiceSell", "InvoiceSell")
                        .WithOne("TransportOffer")
                        .HasForeignKey("bp.ot.s.API.Entities.Dane.TransportOffer.TransportOffer", "InvoiceSellId");

                    b.HasOne("bp.ot.s.API.Entities.Dane.Invoice.PaymentTerms", "PaymentTerms")
                        .WithOne("TransportOffer")
                        .HasForeignKey("bp.ot.s.API.Entities.Dane.TransportOffer.TransportOffer", "PaymentTermsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bp.ot.s.API.Entities.Dane.TransportOffer.TransportOfferAddress", "Unload")
                        .WithOne("Unload")
                        .HasForeignKey("bp.ot.s.API.Entities.Dane.TransportOffer.TransportOffer", "UnloadId");
                });

            modelBuilder.Entity("bp.ot.s.API.Entities.Dane.TransportOffer.TransportOfferAddress", b =>
                {
                    b.HasOne("bp.ot.s.API.Entities.Dane.TransportOffer.TransportOffer", "Load")
                        .WithOne("Load")
                        .HasForeignKey("bp.ot.s.API.Entities.Dane.TransportOffer.TransportOfferAddress", "LoadId");
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.CurrencyNbp", b =>
                {
                    b.HasOne("bp.ot.s.API.Entities.Dane.Invoice.Currency", "Currency")
                        .WithMany("CurrencyNbpList")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bp.ot.s.API.Models.Load.LoadTransEu", "LoadTransEu")
                        .WithOne("Price")
                        .HasForeignKey("bp.ot.s.API.Models.Load.CurrencyNbp", "LoadTransEuId");

                    b.HasOne("bp.ot.s.API.Models.Load.TradeInfo", "TradeInfo")
                        .WithOne("CurrencyNbp")
                        .HasForeignKey("bp.ot.s.API.Models.Load.CurrencyNbp", "TradeInfoId");
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.LoadBuy", b =>
                {
                    b.HasOne("bp.ot.s.API.Models.Load.Load", "Load")
                        .WithOne("LoadBuy")
                        .HasForeignKey("bp.ot.s.API.Models.Load.LoadBuy", "LoadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.LoadInfo", b =>
                {
                    b.HasOne("bp.ot.s.API.Models.Load.LoadBuy", "LoadBuy")
                        .WithOne("LoadInfo")
                        .HasForeignKey("bp.ot.s.API.Models.Load.LoadInfo", "LoadBuyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.LoadInfoExtra", b =>
                {
                    b.HasOne("bp.ot.s.API.Models.Load.LoadInfo", "LoadInfo")
                        .WithOne("ExtraInfo")
                        .HasForeignKey("bp.ot.s.API.Models.Load.LoadInfoExtra", "LoadInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bp.ot.s.API.Models.Load.ViewValueDictionary", "RequiredTruckBody")
                        .WithMany("RequiredTruckBodyList")
                        .HasForeignKey("RequiredTruckBodyId");

                    b.HasOne("bp.ot.s.API.Models.Load.ViewValueDictionary", "TypeOfLoad")
                        .WithMany("TypeOfLoadList")
                        .HasForeignKey("TypeOfLoadId");
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.LoadInfoExtraAddrClassess", b =>
                {
                    b.HasOne("bp.ot.s.API.Models.Load.LoadInfoExtra", "LoadInfoExtra")
                        .WithMany("RequiredAddrClassess")
                        .HasForeignKey("LoadInfoExtraId");

                    b.HasOne("bp.ot.s.API.Models.Load.ViewValueDictionary", "ViewValueDictionary")
                        .WithMany("RequiredAdrClasses")
                        .HasForeignKey("ViewValueDictionaryId");
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.LoadInfoExtraWaysOfLoad", b =>
                {
                    b.HasOne("bp.ot.s.API.Models.Load.LoadInfoExtra", "LoadInfoExtra")
                        .WithMany("RequiredWaysOfLoading")
                        .HasForeignKey("LoadInfoExtraId");

                    b.HasOne("bp.ot.s.API.Models.Load.ViewValueDictionary", "ViewValueDictionary")
                        .WithMany("RequiredWaysOfLoading")
                        .HasForeignKey("ViewValueDictionaryId");
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.LoadRoute", b =>
                {
                    b.HasOne("bp.ot.s.API.Models.Load.LoadBuy", "LoadBuy")
                        .WithMany("Routes")
                        .HasForeignKey("LoadBuyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.LoadRoutePallet", b =>
                {
                    b.HasOne("bp.ot.s.API.Models.Load.LoadRoute", "LoadRoute")
                        .WithMany("Pallets")
                        .HasForeignKey("LoadRouteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.LoadSell", b =>
                {
                    b.HasOne("bp.ot.s.API.Models.Load.Load", "Load")
                        .WithOne("LoadSell")
                        .HasForeignKey("bp.ot.s.API.Models.Load.LoadSell", "LoadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bp.ot.s.API.Entities.Dane.Company.Company", "Principal")
                        .WithMany("LoadSellList")
                        .HasForeignKey("PrincipalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.LoadSellContactPersons", b =>
                {
                    b.HasOne("bp.ot.s.API.Entities.Dane.Company.CompanyEmployee", "CompanyEmployee")
                        .WithMany("LoadSellContactPersonsList")
                        .HasForeignKey("CompanyEmployeeId");

                    b.HasOne("bp.ot.s.API.Models.Load.LoadSell", "LoadSell")
                        .WithMany("ContactPersonsList")
                        .HasForeignKey("LoadSellId");
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.LoadTransEu", b =>
                {
                    b.HasOne("bp.ot.s.API.Models.Load.Load", "Load")
                        .WithOne("LoadTransEu")
                        .HasForeignKey("bp.ot.s.API.Models.Load.LoadTransEu", "LoadId");

                    b.HasOne("bp.ot.s.API.Entities.Dane.Company.Company", "SellingCompany")
                        .WithMany("LoadTransEuList")
                        .HasForeignKey("SellingCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.LoadTransEuContactPerson", b =>
                {
                    b.HasOne("bp.ot.s.API.Entities.Dane.Company.CompanyEmployee", "CompanyEmployee")
                        .WithMany("LoadTransEuContactPersonsList")
                        .HasForeignKey("CompanyEmployeeId");

                    b.HasOne("bp.ot.s.API.Models.Load.LoadTransEu", "LoadTransEu")
                        .WithMany("ContactPersonsList")
                        .HasForeignKey("LoadTransEuId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.TradeInfo", b =>
                {
                    b.HasOne("bp.ot.s.API.Entities.Dane.Company.Company", "Company")
                        .WithMany("TradeInfoList")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bp.ot.s.API.Models.Load.LoadBuy", "LoadBuy")
                        .WithOne("BuyingInfo")
                        .HasForeignKey("bp.ot.s.API.Models.Load.TradeInfo", "LoadBuyId");

                    b.HasOne("bp.ot.s.API.Models.Load.LoadSell", "LoadSell")
                        .WithOne("SellingInfo")
                        .HasForeignKey("bp.ot.s.API.Models.Load.TradeInfo", "LoadSellId");
                });

            modelBuilder.Entity("bp.ot.s.API.Models.Load.ViewValueDictionary", b =>
                {
                    b.HasOne("bp.ot.s.API.Models.Load.ViewValueGroupName", "ViewValueGroupName")
                        .WithMany("ViewValueDictinaryList")
                        .HasForeignKey("ViewValueGroupNameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
